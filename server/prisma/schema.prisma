generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1. User model: manage volunteer signups and signins
model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(VOLUNTEER)
  createdAt DateTime  @default(now())

  profile   Profile?   // bidirectional relation for profile
  eventSignups   EventVolunteer[]  // reverse relation for event signups
  checkIns CheckIn[] // reverse relation to attendence checkins
  messages Message[] // reverse relation to chat messages
  feedbacks Feedback[] // reverse relation to feedback
}

// 2. Profile model: profile of volunteers
model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  email     String
  gender    String?
  bio       String?
  location  String?
  imageUrl  String?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

// 3. Event model: events by the NGO
model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  city        String
  date        DateTime
  maxVolunteers Int
  imageUrl    String?
  createdBy   String

  volunteers  EventVolunteer[]
  checkIns CheckIn[]
  messages Message[]
  feedbacks Feedback[]
}

// 4. Event Volunteer: select volunteers per event
model EventVolunteer {
  id       String   @id @default(uuid())
  eventId  String
  userId   String

  event    Event @relation(fields: [eventId], references: [id])
  user     User  @relation(fields: [userId], references: [id])

  @@unique([eventId, userId]) // Prevent duplicate signup
}

// 5. CheckIn time: for attendence
model CheckIn {
  id           Int @id @default(autoincrement())
  volunteer    User @relation(fields: [volunteerId], references: [id])
  volunteerId  String
  event        Event @relation(fields: [eventId], references: [id])
  eventId      String
  latitude     Float
  longitude    Float
  checkedInAt  DateTime @default(now())
}

// 6. Chat messages: for texting things related to the event
model Message {
  id          String @id @default(uuid())
  content     String?
  imageUrl    String?
  
  sender      User @relation(fields: [senderId], references: [id])
  senderId    String
  
  event       Event @relation(fields: [eventId], references: [id])
  eventId     String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// 7. Feedback: for taking volunteer feedback 
model Feedback {
  id String @id @default(uuid())
  userId String
  eventId String
  comment String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])  
}

enum Role {
  ADMIN
  VOLUNTEER
}
